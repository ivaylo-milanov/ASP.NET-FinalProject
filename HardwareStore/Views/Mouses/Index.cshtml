@model IEnumerable<MouseViewModel>

<div>
    <div class="filter">
        <form method="get" data-url="@Url.Action("FilterMouses", "Mouses")" data-container="#mouses">
            <div class="filter-categories">
                @await Component.InvokeAsync("FilterComponent", new {
                    name = nameof(MouseViewModel.Manufacturer),
                    values = Model.Select(m => m.Manufacturer).Distinct()
                })

                @await Component.InvokeAsync("FilterComponent", new {
                    name = nameof(MouseViewModel.Connectivity),
                    values = Model.Select(m => m.Connectivity).Distinct()
                })

                @await Component.InvokeAsync("FilterComponent", new {
                    name = nameof(MouseViewModel.Interface),
                    values = Model.Select(m => m.Interface).Distinct()
                })

                @await Component.InvokeAsync("FilterComponent", new {
                    name = nameof(MouseViewModel.Sensor),
                    values = Model.Select(m => m.Sensor).Distinct()
                })

                @await Component.InvokeAsync("FilterComponent", new {
                    name = nameof(MouseViewModel.NumberOfKeys),
                    values = Model.Select(m => m.NumberOfKeys.ToString()).Distinct()
                })

                @await Component.InvokeAsync("FilterComponent", new {
                    name = nameof(MouseViewModel.Color),
                    values = Model.Select(m => m.Color).Distinct()
                })
            </div>
            <div class="additional-filters">
                @await Component.InvokeAsync("OrderComponent")
            </div>
        </form>
    </div>
    <div id="mouses">
        @await Component.InvokeAsync("ProductsComponent", new { models = Model })
    </div>
</div>

@section Scripts {
    <script src="~/js/filter.js"></script>
}