// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace HardwareStore.Infrastructure.Migrations
{
    [DbContext(typeof(HardwareStoreDbContext))]
    [Migration("20231120122535_AddedManufaturers")]
    partial class AddedManufaturers
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.24")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("HardwareStore.Infrastructure.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("category id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasComment("category name");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasComment("category table");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Mouse"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Keyboard"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Headset"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Mouse Pad"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Monitor"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Processor"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Motherboard"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Internal Drive"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Power Supply"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Video Card"
                        },
                        new
                        {
                            Id = 11,
                            Name = "RAM"
                        },
                        new
                        {
                            Id = 12,
                            Name = "Case"
                        },
                        new
                        {
                            Id = 13,
                            Name = "Cooler"
                        });
                });

            modelBuilder.Entity("HardwareStore.Infrastructure.Models.Characteristic", b =>
                {
                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("characteristic product id");

                    b.Property<int>("CharacteristicNameId")
                        .HasColumnType("int")
                        .HasComment("characteristic name id");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("nvarchar(120)")
                        .HasComment("characteristic value");

                    b.HasKey("ProductId", "CharacteristicNameId");

                    b.HasIndex("CharacteristicNameId");

                    b.ToTable("Characteristics", (string)null);

                    b.HasComment("characteristic table");
                });

            modelBuilder.Entity("HardwareStore.Infrastructure.Models.CharacteristicName", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("characteristic name id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)")
                        .HasComment("characteristic name");

                    b.HasKey("Id");

                    b.ToTable("CharacteristicsNames");

                    b.HasComment("characteristic name table");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Form Factor"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Format"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Fans included"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Front panel"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Color"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Length"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Width"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Height"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Maximum height of air cooler"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Maximum video card length"
                        },
                        new
                        {
                            Id = 11,
                            Name = "Front supported fans"
                        },
                        new
                        {
                            Id = 12,
                            Name = "Rear fans supported"
                        },
                        new
                        {
                            Id = 13,
                            Name = "Supported fans on top"
                        },
                        new
                        {
                            Id = 14,
                            Name = "Supported water coolers in the front"
                        },
                        new
                        {
                            Id = 15,
                            Name = "Rear water coolers supported"
                        },
                        new
                        {
                            Id = 16,
                            Name = "Supported water coolers on top"
                        },
                        new
                        {
                            Id = 17,
                            Name = "Mesh front panel"
                        },
                        new
                        {
                            Id = 18,
                            Name = "Supported side fans"
                        },
                        new
                        {
                            Id = 19,
                            Name = "Supported water coolers on the side"
                        },
                        new
                        {
                            Id = 20,
                            Name = "Supported fans below"
                        },
                        new
                        {
                            Id = 21,
                            Name = "Supported water coolers below"
                        },
                        new
                        {
                            Id = 22,
                            Name = "Type"
                        },
                        new
                        {
                            Id = 23,
                            Name = "Socket"
                        },
                        new
                        {
                            Id = 24,
                            Name = "Fan speed"
                        },
                        new
                        {
                            Id = 25,
                            Name = "Noise level"
                        },
                        new
                        {
                            Id = 26,
                            Name = "Fan size"
                        },
                        new
                        {
                            Id = 27,
                            Name = "Connector"
                        },
                        new
                        {
                            Id = 28,
                            Name = "Backlight"
                        },
                        new
                        {
                            Id = 29,
                            Name = "Air flow"
                        },
                        new
                        {
                            Id = 30,
                            Name = "TDP"
                        },
                        new
                        {
                            Id = 31,
                            Name = "Form"
                        },
                        new
                        {
                            Id = 32,
                            Name = "Interface"
                        },
                        new
                        {
                            Id = 33,
                            Name = "Microphone"
                        },
                        new
                        {
                            Id = 34,
                            Name = "Frequency range"
                        },
                        new
                        {
                            Id = 35,
                            Name = "Resistance"
                        },
                        new
                        {
                            Id = 36,
                            Name = "Waterproof"
                        },
                        new
                        {
                            Id = 37,
                            Name = "Soundproofing"
                        },
                        new
                        {
                            Id = 38,
                            Name = "Sensitivity"
                        },
                        new
                        {
                            Id = 39,
                            Name = "Compatibility"
                        },
                        new
                        {
                            Id = 40,
                            Name = "Cable length"
                        },
                        new
                        {
                            Id = 41,
                            Name = "Size of speakers"
                        },
                        new
                        {
                            Id = 42,
                            Name = "Capacity"
                        },
                        new
                        {
                            Id = 43,
                            Name = "Reading speed"
                        },
                        new
                        {
                            Id = 44,
                            Name = "Writing speed"
                        },
                        new
                        {
                            Id = 45,
                            Name = "Random Read IOPS"
                        },
                        new
                        {
                            Id = 46,
                            Name = "Random Write IOPS"
                        },
                        new
                        {
                            Id = 47,
                            Name = "Connectivity"
                        },
                        new
                        {
                            Id = 48,
                            Name = "Cyrillicization"
                        },
                        new
                        {
                            Id = 49,
                            Name = "Type of buttons"
                        },
                        new
                        {
                            Id = 50,
                            Name = "Macro buttons"
                        },
                        new
                        {
                            Id = 51,
                            Name = "Layout"
                        },
                        new
                        {
                            Id = 52,
                            Name = "Hot-swappable"
                        },
                        new
                        {
                            Id = 53,
                            Name = "Multi media buttons"
                        },
                        new
                        {
                            Id = 54,
                            Name = "Switch"
                        },
                        new
                        {
                            Id = 55,
                            Name = "Screen size"
                        },
                        new
                        {
                            Id = 56,
                            Name = "Resolution"
                        },
                        new
                        {
                            Id = 57,
                            Name = "Matrix"
                        },
                        new
                        {
                            Id = 58,
                            Name = "Refresh rate"
                        },
                        new
                        {
                            Id = 59,
                            Name = "Reaction time"
                        },
                        new
                        {
                            Id = 60,
                            Name = "Ports"
                        },
                        new
                        {
                            Id = 61,
                            Name = "Stand adjustment"
                        },
                        new
                        {
                            Id = 62,
                            Name = "Touch screen"
                        },
                        new
                        {
                            Id = 63,
                            Name = "VESA"
                        },
                        new
                        {
                            Id = 64,
                            Name = "Brightness"
                        },
                        new
                        {
                            Id = 65,
                            Name = "Technology"
                        },
                        new
                        {
                            Id = 66,
                            Name = "Chipset"
                        },
                        new
                        {
                            Id = 67,
                            Name = "Number of memory slots"
                        },
                        new
                        {
                            Id = 68,
                            Name = "RAM capacity"
                        },
                        new
                        {
                            Id = 69,
                            Name = "Memory frequency"
                        },
                        new
                        {
                            Id = 70,
                            Name = "Supported memory"
                        },
                        new
                        {
                            Id = 71,
                            Name = "Built-in Wi-Fi"
                        },
                        new
                        {
                            Id = 72,
                            Name = "Thickness"
                        },
                        new
                        {
                            Id = 73,
                            Name = "Surface"
                        },
                        new
                        {
                            Id = 74,
                            Name = "Cover"
                        },
                        new
                        {
                            Id = 75,
                            Name = "Sensor"
                        },
                        new
                        {
                            Id = 76,
                            Name = "Programmable buttons"
                        },
                        new
                        {
                            Id = 77,
                            Name = "Number of buttons"
                        },
                        new
                        {
                            Id = 78,
                            Name = "Power"
                        },
                        new
                        {
                            Id = 79,
                            Name = "Certificate"
                        },
                        new
                        {
                            Id = 80,
                            Name = "Efficiency"
                        },
                        new
                        {
                            Id = 81,
                            Name = "PCIe Gen5"
                        },
                        new
                        {
                            Id = 82,
                            Name = "Physical cores"
                        },
                        new
                        {
                            Id = 83,
                            Name = "Threads"
                        },
                        new
                        {
                            Id = 84,
                            Name = "Base frequency"
                        },
                        new
                        {
                            Id = 85,
                            Name = "Boost frequency"
                        },
                        new
                        {
                            Id = 86,
                            Name = "Cache memory"
                        },
                        new
                        {
                            Id = 87,
                            Name = "Box cooler"
                        },
                        new
                        {
                            Id = 88,
                            Name = "Series"
                        },
                        new
                        {
                            Id = 89,
                            Name = "Generation"
                        },
                        new
                        {
                            Id = 90,
                            Name = "Frequency"
                        },
                        new
                        {
                            Id = 91,
                            Name = "Timing"
                        },
                        new
                        {
                            Id = 92,
                            Name = "Purpose"
                        },
                        new
                        {
                            Id = 93,
                            Name = "Heatsink"
                        },
                        new
                        {
                            Id = 94,
                            Name = "Kit"
                        },
                        new
                        {
                            Id = 95,
                            Name = "Memory"
                        },
                        new
                        {
                            Id = 96,
                            Name = "Cores"
                        },
                        new
                        {
                            Id = 97,
                            Name = "Sheena"
                        },
                        new
                        {
                            Id = 98,
                            Name = "Outputs"
                        },
                        new
                        {
                            Id = 99,
                            Name = "Memory type"
                        },
                        new
                        {
                            Id = 100,
                            Name = "Weight"
                        });
                });

            modelBuilder.Entity("HardwareStore.Infrastructure.Models.Customer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("customer address");

                    b.Property<string>("Area")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("customer area");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("customer city");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)")
                        .HasComment("customer first name");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)")
                        .HasComment("customer last name");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasComment("customer table");
                });

            modelBuilder.Entity("HardwareStore.Infrastructure.Models.Favorite", b =>
                {
                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("favorite product id");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("favorite user id");

                    b.HasKey("ProductId", "CustomerId");

                    b.HasIndex("CustomerId");

                    b.ToTable("Favorites", (string)null);

                    b.HasComment("favorite table");
                });

            modelBuilder.Entity("HardwareStore.Infrastructure.Models.Manufacturer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("manufacturer id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasComment("manufacturer name");

                    b.HasKey("Id");

                    b.ToTable("Manufacturers");

                    b.HasComment("manufacturer table");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "ASUS"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Kolink"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Lian-Li"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Cooler Master"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Corsair"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Arctic"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Hama"
                        },
                        new
                        {
                            Id = 8,
                            Name = "A4Tech"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Plantronics"
                        },
                        new
                        {
                            Id = 10,
                            Name = "JBL"
                        },
                        new
                        {
                            Id = 11,
                            Name = "HyperX"
                        },
                        new
                        {
                            Id = 12,
                            Name = "Logitech"
                        },
                        new
                        {
                            Id = 13,
                            Name = "Creative"
                        },
                        new
                        {
                            Id = 14,
                            Name = "SteelSeries"
                        },
                        new
                        {
                            Id = 15,
                            Name = "Gigabyte"
                        },
                        new
                        {
                            Id = 16,
                            Name = "Silicon Power"
                        },
                        new
                        {
                            Id = 17,
                            Name = "Samsung"
                        },
                        new
                        {
                            Id = 18,
                            Name = "Kingston"
                        },
                        new
                        {
                            Id = 19,
                            Name = "Xtrfy"
                        },
                        new
                        {
                            Id = 20,
                            Name = "Keychron"
                        },
                        new
                        {
                            Id = 21,
                            Name = "Ducky"
                        },
                        new
                        {
                            Id = 22,
                            Name = "BenQ"
                        },
                        new
                        {
                            Id = 23,
                            Name = "LG"
                        },
                        new
                        {
                            Id = 24,
                            Name = "EIZO"
                        },
                        new
                        {
                            Id = 25,
                            Name = "ZOWIE"
                        },
                        new
                        {
                            Id = 26,
                            Name = "ASRock"
                        },
                        new
                        {
                            Id = 27,
                            Name = "NEC"
                        },
                        new
                        {
                            Id = 28,
                            Name = "MSI"
                        },
                        new
                        {
                            Id = 29,
                            Name = "Spartan Gear"
                        },
                        new
                        {
                            Id = 30,
                            Name = "Glorious"
                        },
                        new
                        {
                            Id = 31,
                            Name = "Blizzard"
                        },
                        new
                        {
                            Id = 32,
                            Name = "Seasonic"
                        },
                        new
                        {
                            Id = 33,
                            Name = "FSP"
                        },
                        new
                        {
                            Id = 34,
                            Name = "Thermaltake"
                        },
                        new
                        {
                            Id = 35,
                            Name = "NZXT"
                        },
                        new
                        {
                            Id = 36,
                            Name = "be quiet!"
                        },
                        new
                        {
                            Id = 37,
                            Name = "Intel"
                        },
                        new
                        {
                            Id = 38,
                            Name = "AMD"
                        },
                        new
                        {
                            Id = 39,
                            Name = "ADATA"
                        },
                        new
                        {
                            Id = 40,
                            Name = "G.SKILL"
                        },
                        new
                        {
                            Id = 41,
                            Name = "Team Group"
                        },
                        new
                        {
                            Id = 42,
                            Name = "PowerColor"
                        });
                });

            modelBuilder.Entity("HardwareStore.Infrastructure.Models.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("order id");

                    b.Property<string>("AdditionalNotes")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)")
                        .HasComment("order additional notes");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("order address");

                    b.Property<string>("Area")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("order area");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("order city");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("order customer id");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)")
                        .HasComment("order first name");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)")
                        .HasComment("order last name");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2")
                        .HasComment("order date");

                    b.Property<int>("OrderStatus")
                        .HasColumnType("int")
                        .HasComment("order status");

                    b.Property<int>("PaymentMethod")
                        .HasColumnType("int")
                        .HasComment("order payment method");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("order phone");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18,2)")
                        .HasComment("order total amount");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("Orders");

                    b.HasComment("order table");
                });

            modelBuilder.Entity("HardwareStore.Infrastructure.Models.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("product id");

                    b.Property<DateTime>("AddDate")
                        .HasColumnType("datetime2")
                        .HasComment("product add date");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int")
                        .HasComment("product category id");

                    b.Property<string>("Description")
                        .HasMaxLength(5000)
                        .HasColumnType("nvarchar(max)")
                        .HasComment("product description");

                    b.Property<int?>("ManufacturerId")
                        .HasColumnType("int")
                        .HasComment("product manufacturer id");

                    b.Property<string>("Model")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasComment("product model");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)")
                        .HasComment("product name");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)")
                        .HasComment("product price");

                    b.Property<int>("Quantity")
                        .HasColumnType("int")
                        .HasComment("product quantity");

                    b.Property<string>("ReferenceNumber")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("product reference number");

                    b.Property<int>("Warranty")
                        .HasColumnType("int")
                        .HasComment("product warranty");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ManufacturerId");

                    b.ToTable("Products");

                    b.HasComment("product table");
                });

            modelBuilder.Entity("HardwareStore.Infrastructure.Models.ProductOrder", b =>
                {
                    b.Property<Guid>("OrderId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("product order order id");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("product order product id");

                    b.Property<int>("Quantity")
                        .HasColumnType("int")
                        .HasComment("product order quantity");

                    b.HasKey("OrderId", "ProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductsOrders", (string)null);

                    b.HasComment("product order table");
                });

            modelBuilder.Entity("HardwareStore.Infrastructure.Models.ShoppingCartItem", b =>
                {
                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("shopping cart item product id");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("shopping cart item customer id");

                    b.Property<int>("Quantity")
                        .HasColumnType("int")
                        .HasComment("shopping cart item quantity");

                    b.HasKey("ProductId", "CustomerId");

                    b.HasIndex("CustomerId");

                    b.ToTable("ShoppingCartItems", (string)null);

                    b.HasComment("shopping cart item table");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("HardwareStore.Infrastructure.Models.Characteristic", b =>
                {
                    b.HasOne("HardwareStore.Infrastructure.Models.CharacteristicName", "CharacteristicName")
                        .WithMany("Characteristics")
                        .HasForeignKey("CharacteristicNameId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("HardwareStore.Infrastructure.Models.Product", "Product")
                        .WithMany("Characteristics")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("CharacteristicName");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("HardwareStore.Infrastructure.Models.Favorite", b =>
                {
                    b.HasOne("HardwareStore.Infrastructure.Models.Customer", "Customer")
                        .WithMany("Favorites")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("HardwareStore.Infrastructure.Models.Product", "Product")
                        .WithMany("Favorites")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("HardwareStore.Infrastructure.Models.Order", b =>
                {
                    b.HasOne("HardwareStore.Infrastructure.Models.Customer", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("HardwareStore.Infrastructure.Models.Product", b =>
                {
                    b.HasOne("HardwareStore.Infrastructure.Models.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HardwareStore.Infrastructure.Models.Manufacturer", "Manufacturer")
                        .WithMany("Products")
                        .HasForeignKey("ManufacturerId");

                    b.Navigation("Category");

                    b.Navigation("Manufacturer");
                });

            modelBuilder.Entity("HardwareStore.Infrastructure.Models.ProductOrder", b =>
                {
                    b.HasOne("HardwareStore.Infrastructure.Models.Order", "Order")
                        .WithMany("ProductsOrders")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("HardwareStore.Infrastructure.Models.Product", "Product")
                        .WithMany("ProductsOrders")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("HardwareStore.Infrastructure.Models.ShoppingCartItem", b =>
                {
                    b.HasOne("HardwareStore.Infrastructure.Models.Customer", "Customer")
                        .WithMany("ShoppingCartItems")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("HardwareStore.Infrastructure.Models.Product", "Product")
                        .WithMany("ShoppingCartItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("HardwareStore.Infrastructure.Models.Customer", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("HardwareStore.Infrastructure.Models.Customer", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HardwareStore.Infrastructure.Models.Customer", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("HardwareStore.Infrastructure.Models.Customer", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HardwareStore.Infrastructure.Models.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("HardwareStore.Infrastructure.Models.CharacteristicName", b =>
                {
                    b.Navigation("Characteristics");
                });

            modelBuilder.Entity("HardwareStore.Infrastructure.Models.Customer", b =>
                {
                    b.Navigation("Favorites");

                    b.Navigation("Orders");

                    b.Navigation("ShoppingCartItems");
                });

            modelBuilder.Entity("HardwareStore.Infrastructure.Models.Manufacturer", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("HardwareStore.Infrastructure.Models.Order", b =>
                {
                    b.Navigation("ProductsOrders");
                });

            modelBuilder.Entity("HardwareStore.Infrastructure.Models.Product", b =>
                {
                    b.Navigation("Characteristics");

                    b.Navigation("Favorites");

                    b.Navigation("ProductsOrders");

                    b.Navigation("ShoppingCartItems");
                });
#pragma warning restore 612, 618
        }
    }
}
